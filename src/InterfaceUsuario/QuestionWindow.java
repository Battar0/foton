/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfaceUsuario;

import regrasNegocio.*;
import Excecoes.*;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

public class QuestionWindow extends javax.swing.JFrame 
{
    FormWindow formPai;
    Pergunta pergunta;
    
    private final String[] tipos_perguntas_strings = 
    {
        "aberta",
        "lista",
        "alternativa",
        "exclusiva",
        "opcional"
    };
    /**
     * Creates new form QuestionWindow
     */
    public QuestionWindow(FormWindow form) {
        initComponents();
        defineConfig();
        
        formPai = form;
        pergunta = null;

        this.setLocationRelativeTo(null);
    }
    
    public QuestionWindow(FormWindow form, Pergunta pergunta){
        initComponents();
        defineConfig();
        
        this.setLocationRelativeTo(null);
        
        formPai = form;  
        this.enunciado.setText(pergunta.getTexto());
        
        if (pergunta instanceof PerguntaAberta)
            cbAlternativas.setSelectedIndex(0);
        
        else if(pergunta instanceof PerguntaLista){
            cbAlternativas.setSelectedIndex(1);
            
            for (int count = 0; count < ((PerguntaLista) pergunta).getNumeroAlternativas(); count++){ 
                taAlternativas.append(((PerguntaLista) pergunta).getAlternativa(count));
            
                if((count + 1) < ((PerguntaLista) pergunta).getNumeroAlternativas())
                    taAlternativas.append("\n");
            }
        }
        
        else if(pergunta instanceof PerguntaAlternativa){
            cbAlternativas.setSelectedIndex(2);
            
            for (int count = 0; count < ((PerguntaAlternativa) pergunta).getNumeroAlternativas(); count++){ 
                taAlternativas.append(((PerguntaAlternativa) pergunta).getAlternativa(count));
            
                if((count + 1) < ((PerguntaAlternativa) pergunta).getNumeroAlternativas())
                    taAlternativas.append("\n");
            }
        }
        
        else if(pergunta instanceof PerguntaExclusiva){
            cbAlternativas.setSelectedIndex(3);
            
            for (int count = 0; count < ((PerguntaExclusiva) pergunta).getNumeroAlternativas(); count++){ 
                taAlternativas.append(((PerguntaExclusiva) pergunta).getAlternativa(count));
            
                if((count + 1) < ((PerguntaExclusiva) pergunta).getNumeroAlternativas())
                    taAlternativas.append("\n");
            }
        }
        
        else if(pergunta instanceof PerguntaOpcional)
            cbAlternativas.setSelectedIndex(4);
        
    }
    
    private void defineConfig()
    {
        // Define os tipos de pergunta
        for(String alternativa : tipos_perguntas_strings)
            cbAlternativas.addItem(alternativa);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        enunciado = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cbAlternativas = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taAlternativas = new javax.swing.JTextArea();
        bSalvar = new javax.swing.JButton();
        bDescartar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fóton - Pergunta");
        setAlwaysOnTop(true);
        setResizable(false);

        jLabel1.setText("Enunciado :");

        jLabel2.setText("Tipo de pergunta :");

        cbAlternativas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAlternativasActionPerformed(evt);
            }
        });

        jLabel3.setText("Alternativas ( Se possível ): ");

        taAlternativas.setColumns(20);
        taAlternativas.setRows(5);
        taAlternativas.setEnabled(false);
        jScrollPane1.setViewportView(taAlternativas);

        bSalvar.setText("Salvar");
        bSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalvarActionPerformed(evt);
            }
        });

        bDescartar.setText("Descartar");
        bDescartar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDescartarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enunciado))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbAlternativas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bDescartar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(enunciado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(cbAlternativas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(bSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bDescartar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bDescartarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDescartarActionPerformed
        dispose();
    }//GEN-LAST:event_bDescartarActionPerformed
   
    private void bSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalvarActionPerformed
        try{
            // Verifica se existe enunciado
            if(enunciado.getText().isEmpty())
                throw new EnunciadoNaoInformadoException();
            else
            {
                String texto_enunciado = enunciado.getText();
                
                // Verifica se a pergunta é de resposta livre
                if (cbAlternativas.getSelectedItem().toString().toLowerCase().equals(tipos_perguntas_strings[0]))
                {
                    // Cria a pergunta e adciona a lista
                    pergunta = new PerguntaAberta(enunciado.getText());
                    
                    formPai.formulario.add(pergunta);
                    formPai.addTaPerguntas(pergunta.getTexto());
                }
                else
                {
                    // Recebe as alternativas inseridas 
                    String saux = taAlternativas.getText();
                    
                    // Verifica se existe alternativas
                    if(saux.isEmpty())
                        throw new AlternativasNaoInformadasException();
                    
                    // Separa as alternativas por '\n'
                    String[] str_alternativas = saux.split("\n");
                    
                    // Cria a pergunta e adciona a lista
                    String cb_alternativas_str = cbAlternativas.getSelectedItem().toString();
                    
                    if(cb_alternativas_str.equals(tipos_perguntas_strings[1]))
                        pergunta = new PerguntaLista(texto_enunciado, str_alternativas);
                    
                    else if(cb_alternativas_str.equals(tipos_perguntas_strings[2]))
                        pergunta = new PerguntaAlternativa(texto_enunciado, str_alternativas);
                    
                    else if(cb_alternativas_str.equals(tipos_perguntas_strings[3]))
                        pergunta = new PerguntaExclusiva(texto_enunciado, str_alternativas);
                    
                    else if(cb_alternativas_str.equals(tipos_perguntas_strings[4]))
                        pergunta = new PerguntaOpcional(texto_enunciado);
                    
                    if(pergunta != null){
                        formPai.formulario.add(pergunta);
                        formPai.addTaPerguntas(pergunta.getTexto());
                    }
                    else { 
                        System.out.println("Erro: variável não inicializada");
                    }
                }
                
                dispose();
            }
        }
        
        catch (EnunciadoNaoInformadoException e){
            JOptionPane optionPane = new JOptionPane(e.getMessage(), JOptionPane.ERROR_MESSAGE);    
            JDialog dialog = optionPane.createDialog("Error");
            dialog.setVisible(true);
        }
        
        catch (AlternativasNaoInformadasException e){
            JOptionPane optionPane = new JOptionPane(e.getMessage(), JOptionPane.ERROR_MESSAGE);    
            JDialog dialog = optionPane.createDialog("Error");
            dialog.setVisible(true);
        }
        
    }//GEN-LAST:event_bSalvarActionPerformed

    private void cbAlternativasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAlternativasActionPerformed
        // Desabilita a edição da alternativas se for pergunta aberta ou opcional (s/n)
        if ((cbAlternativas.getSelectedItem().toString().toLowerCase().equals("aberta")) || 
                (cbAlternativas.getSelectedItem().toString().toLowerCase().equals("opcional"))){
            taAlternativas.setEnabled(false);
            
            taAlternativas.setText("");
            
            // Seta as alternativas para o tipo Opcional
            if (cbAlternativas.getSelectedItem().toString().toLowerCase().equals("opcional"))
                taAlternativas.setText("Sim\nNão");
        }
        
        // Habilita a edição das alternativas
        else
            taAlternativas.setEnabled(true);
        
        // Seta o tipo de pergunta
        
    }//GEN-LAST:event_cbAlternativasActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDescartar;
    private javax.swing.JButton bSalvar;
    private javax.swing.JComboBox<String> cbAlternativas;
    private javax.swing.JTextField enunciado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea taAlternativas;
    // End of variables declaration//GEN-END:variables
}
